from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, User, FSInputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import random
import logging
import os
import asyncio
from datetime import timedelta, datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

router = Router()

# –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
from config import CHANNEL_LINK, SUPPORT_GROUP_ID
from database import add_user, is_banned, ban_user

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu():
    if not CHANNEL_LINK.startswith(('http://', 'https://')):
        logging.warning(f"CHANNEL_LINK '{CHANNEL_LINK}' is not a valid URL. Using default Telegram link.")
        channel_url = "https://t.me/PiratesMarket"
    else:
        channel_url = CHANNEL_LINK

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÜ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommendations")],
        [
            InlineKeyboardButton(text="üóÇ –í—ã–±—Ä–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω", callback_data="shops"),
            InlineKeyboardButton(text="üöÄ –≠–∫—Å–ø—Ä–µ—Å—Å –ø–æ–∫—É–ø–∫–∞", callback_data="express")
        ],
        [
            InlineKeyboardButton(text="üß≠ –î—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞", callback_data="cities_countries"),
            InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞", callback_data="work")
        ],
        [
            InlineKeyboardButton(text="‚öô –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
            InlineKeyboardButton(text="üîó –ù–∞—à–∏ —Å—Å—ã–ª–∫–∏", url=channel_url)
        ]
    ])
    return keyboard

def get_welcome_text(user: User):
    full_name = user.full_name
    return (
        f"<b>üè¥‚Äç‚ò† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <a href='tg://user?id={user.id}'><b>{full_name}</b></a>!</b>\n\n"
        f"<b>Pirates Market</b> ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∫–∏.\n\n"
        f"ü•∑ <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫</b>\n"
        f"üöÄ <b>–≠–∫—Å–ø—Ä–µ—Å—Å –ü–æ–∫—É–ø–∫–∏ –≤ 2 –∫–ª–∏–∫–∞</b>\n"
        f"üïí <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</b>\n"
        f"‚úÖ <b>–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã</b>\n\n"
        f"         <b>–ë–æ–ª–µ–µ 3—Ö –ª–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ</b>\n\n"
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å</b>"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def start_command(message: Message):
    if message.chat.type != "private":
        await message.answer("<b>‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!</b>", parse_mode="HTML")
        return
    if is_banned(message.from_user.id):
        await message.answer("<b>‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!</b>", parse_mode="HTML")
        return
    add_user(message.from_user.id, message.from_user.username)
    logger.info(f"User {message.from_user.id} started the bot")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ú–Ω–µ –µ—Å—Ç—å 18 ‚úÖ", callback_data="age_yes"),
            InlineKeyboardButton(text="–ú–Ω–µ –Ω–µ—Ç 18 ‚ùå", callback_data="age_no")
        ]
    ])
    if os.path.exists("media/captcha.jpg"):
        photo = FSInputFile("media/captcha.jpg")
        await message.answer_photo(
            photo=photo,
            caption="<b>–°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ª–∏—Ü —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç üîû</b>\n\n<b>–ß—Ç–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "<b>–°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ª–∏—Ü —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç üîû</b>\n\n<b>–ß—Ç–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@router.callback_query(F.data == "age_yes")
async def age_yes_handler(callback: CallbackQuery):
    await callback.message.delete()
    if os.path.exists("media/start.jpg"):
        photo = FSInputFile("media/start.jpg")
        await callback.message.answer_photo(
            photo=photo,
            caption=get_welcome_text(callback.from_user),
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
    else:
        await callback.message.answer(
            get_welcome_text(callback.from_user),
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
    logger.info(f"User {callback.from_user.id} confirmed age 18+")

@router.callback_query(F.data == "age_no")
async def age_no_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    ban_until = datetime.now() + timedelta(hours=24)
    ban_user(user_id, ban_until)
    await callback.message.delete()
    await callback.message.answer(
        "<b>üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!</b>\n\n–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏, —á—Ç–æ –≤–∞–º –Ω–µ—Ç 18.\n–°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º, –≤—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–≠—Ç–æ –æ—à–∏–±–∫–∞", callback_data="report_error")]
        ]),
        parse_mode="HTML"
    )
    logger.info(f"User {user_id} blocked for 24 hours due to age < 18")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∫–∞–ø—á–∏
@router.callback_query(F.data == "report_error")
async def report_error_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or str(user_id)
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    error_message = (
        f"<b>#–û—à–∏–±–∫–∞–ö–∞–ø—á–∏</b>\n\n"
        f"<b>üìÖ {timestamp}</b>\n"
        f"<b>üë§ @{username} (ID: {user_id})</b>\n"
        f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ—à–∏–±–∫–µ –∫–∞–ø—á–∏, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É."
    )
    from config import SUPPORT_GROUP_ID
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data=f"unban_{user_id}")]
    ])
    await callback.bot.send_message(SUPPORT_GROUP_ID, error_message, reply_markup=keyboard, parse_mode="HTML")
    await callback.message.edit_text(
        "<b>‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.</b>",
        reply_markup=None,
        parse_mode="HTML"
    )
    logger.info(f"User {user_id} reported captcha error")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.delete()
    if os.path.exists("media/start.jpg"):
        photo = FSInputFile("media/start.jpg")
        await callback.message.answer_photo(
            photo=photo,
            caption=get_welcome_text(callback.from_user),
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
    else:
        await callback.message.answer(
            get_welcome_text(callback.from_user),
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
    logger.info(f"User {callback.from_user.id} returned to main menu")
    await callback.answer()

def register_handlers(dp):
    dp.include_router(router)
