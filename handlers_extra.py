from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import time
import logging
from aiogram.enums import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ middleware
class BanCheckMiddleware:
    async def __call__(self, handler, event, data):
        user_id = event.from_user.id if isinstance(event, (Message, CallbackQuery)) else None
        
        event_type = "message" if isinstance(event, Message) else "callback"
        logger.info(f"[Middleware] {event_type} from user {user_id} in chat {event.chat.id if hasattr(event, 'chat') else 'N/A'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
        if user_id and await is_user_banned(user_id):
            logger.info(f"User {user_id} is banned, action blocked")
            return None
        
        return await handler(event, data)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –±–∞–Ω–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
banned_users = set()

async def is_user_banned(user_id):
    return user_id in banned_users

async def ban_user(user_id):
    banned_users.add(user_id)
    logger.info(f"User {user_id} banned")

async def unban_user(user_id):
    if user_id in banned_users:
        banned_users.remove(user_id)
        logger.info(f"User {user_id} unbanned")

router = Router()

# –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
from config import EXPRESS_GROUP_ID, SUPPORT_GROUP_ID
from handlers_main import get_welcome_text, get_main_menu
from database import get_user_registration_date

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class ExpressState(StatesGroup):
    waiting_for_order = State()
    waiting_for_send = State()

class SupportState(StatesGroup):
    waiting_for_request = State()
    waiting_for_send = State()

class ReplyState(StatesGroup):
    waiting_for_reply = State()
    waiting_for_send_reply = State()

class ShopSupportState(StatesGroup):
    waiting_for_shop_data = State()
    waiting_for_send_shop = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
def get_send_menu(order_text):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_order"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ]
    ])
    return keyboard, order_text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def get_info_menu(user_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data=f"info_{user_id[:8]}")]
    ])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" (—Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º callback)
def get_back_menu(callback_data="main_menu"):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback_data)]
    ])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–≠–∫—Å–ø—Ä–µ—Å—Å –ø–æ–∫—É–ø–∫–∏"
@router.callback_query(F.data == "express")
async def start_express(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(
        "<b>#–≠–∫—Å–ø—Ä–µ—Å—Å–ü–æ–∫—É–ø–∫–∏ ‚ö°Ô∏è</b>\n\n"
        "<b>–î–ª—è –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å —É–∫–∞–∑–∞–≤ –≥–æ—Ä–æ–¥, —Ç–æ–≤–∞—Ä, –≤–µ—Å –∏ —Å–≤–æ–π –±—é–¥–∂–µ—Ç</b>\n\n"
        "<b><i>–ù–∞–ø—Ä–∏–º–µ—Ä</i></b>: <i>–ê–ª–º–∞—Ç—ã —Å–æ—Ä—Ç 1–≥ 25–∫</i>\n"
        "<b><i>–ò–ª–∏</i></b>: <i>–ê—Å—Ç–∞–Ω–∞ –ì–∞—à 2–≥—Ä –¥–æ—Å—Ç–∞–≤–∫–∞</i>\n\n"
        "<b>–í–∞–º –±—É–¥—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Å–µ–±—è –≤–∞—Ä–∏–∞–Ω—Ç ‚úîÔ∏è</b>\n\n"
        "<b>–£–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ üè¥‚Äç‚ò†</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]),
        parse_mode="HTML"
    )
    logger.info(f"User {callback.from_user.id} started express order")
    await state.set_state(ExpressState.waiting_for_order)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–∫–∞–∑–∞
@router.message(ExpressState.waiting_for_order, F.content_type == "text")
async def process_express_order(message: Message, state: FSMContext):
    order_text = message.text
    await state.update_data(order_text=order_text, group_id=EXPRESS_GROUP_ID, request_type="express")
    send_menu, _ = get_send_menu(order_text)
    await message.delete()
    await message.answer(
        f"<b>üõé –í–∞—à –∑–∞–∫–∞–∑: </b>‚ö°Ô∏è\n\n"
        f"{order_text}\n\n"
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É: </b>",
        reply_markup=send_menu,
        parse_mode="HTML"
    )
    logger.info(f"User {message.from_user.id} entered express order: {order_text}")
    await state.set_state(ExpressState.waiting_for_send)

@router.message(ExpressState.waiting_for_order, ~F.content_type.in_(["text"]))
async def reject_express_order(message: Message):
    await message.answer("<b>‚ùå –î–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!</b>", parse_mode="HTML")
    logger.info(f"User {message.from_user.id} tried to send non-text in express order")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –¥–ª—è —ç–∫—Å–ø—Ä–µ—Å—Å
@router.callback_query(ExpressState.waiting_for_send, F.data == "send_order")
async def send_express_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_text = data["order_text"]
    user = callback.from_user
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(time.time() + 5 * 3600))  # UTC+5
    
    order_message = (
        f"<b>üîñ #–ù–æ–≤—ã–π–ó–∞–∫–∞–∑ ‚ö°Ô∏è</b>\n\n"
        f"<b>üìÜ {timestamp}</b>\n"
        f"<b>üë§ @{user.username or user.id} (ID: {user.id})</b>\n"
        f"<b>üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {order_text}</b>"
    )
    
    keyboard = get_info_menu(str(user.id))
    await callback.bot.send_message(EXPRESS_GROUP_ID, order_message, reply_markup=keyboard, parse_mode="HTML")
    
    await callback.message.edit_text(
        "<b>üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]),
        parse_mode="HTML"
    )
    logger.info(f"Express order sent by user {user.id}: {order_text}")
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è —ç–∫—Å–ø—Ä–µ—Å—Å
@router.callback_query(ExpressState.waiting_for_send, F.data == "back_to_menu")
async def back_to_menu_express(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(
        get_welcome_text(callback.from_user),
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    logger.info(f"User {callback.from_user.id} returned to main menu from express")
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
@router.callback_query(F.data == "support")
async def start_support(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(
        "<b>‚öô –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "<b>üïπ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõí –î–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π", callback_data="support_customers")],
            [InlineKeyboardButton(text="ü§ù –î–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤", callback_data="support_shops")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]),
        parse_mode="HTML"
    )
    logger.info(f"User {callback.from_user.id} started support request")
    await state.set_state(SupportState.waiting_for_request)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ "–î–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"
@router.callback_query(F.data == "support_customers")
async def start_support_customers(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(
        "<b>üõí –î–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</b>\n\n"
        "<b>‚ûñ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å/–∂–∞–ª–æ–±—É –Ω–∞ –º–∞–≥–∞–∑–∏–Ω –∏–ª–∏ –∞–¥–º–∏–Ω–æ–≤ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –í–∞–º –æ—Ç–≤–µ—Ç—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 24—Ö —á–∞—Å–æ–≤</b>\n\n"
        "<b>‚ö†Ô∏è –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ</b>\n\n"
        "<b>üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="show_rules")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="support")]
        ]),
        parse_mode="HTML"
    )
    await state.set_state(SupportState.waiting_for_request)
    await state.update_data(group_id=SUPPORT_GROUP_ID, request_type="support_customers", hashtag="#–ñ–∞–ª–æ–±–∞")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ "–î–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤"
@router.callback_query(F.data == "support_shops")
async def start_support_shops(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(
        "<b>ü§ù –î–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤</b>\n\n"
        "<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º üåê</b>\n\n"
        "<b>‚ñ´Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞, –≥–æ—Ä–æ–¥(–∞), –≤–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω, –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –ª–∏—Ü –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö —Ä–µ—à–µ–Ω–∏—è</b>\n\n"
        "<b>‚ú® –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞, –≥–æ—Ä–æ–¥(–∞), –≤–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω, –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –ª–∏—Ü –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö —Ä–µ—à–µ–Ω–∏—è</b>\n\n"
        "<b><i>–ù–∞–ø—Ä–∏–º–µ—Ä</i></b>: <i>–ü–∏—Ä–∞—Ç—ã, –ê–ª–º–∞—Ç—ã –ê—Å—Ç–∞–Ω–∞, –°–æ—Ä—Ç, –î—É—Å, LINK, @big_brokz</i>\n\n"
        "<b>–û—Ç–≤–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç –Ω–µ –ø–æ–∑–∂–µ 24 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ ‚è≥</b>\n\n"
        "<b>–ë—É–¥–µ–º —Ä–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É ü§ù</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="support")]
        ]),
        parse_mode="HTML"
    )
    await state.set_state(ShopSupportState.waiting_for_shop_data)
    await state.update_data(group_id=SUPPORT_GROUP_ID, request_type="support_shops", hashtag="#–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É
@router.message(SupportState.waiting_for_request, F.content_type == "text")
async def process_support_request(message: Message, state: FSMContext):
    request_text = message.text
    await state.update_data(request_text=request_text, group_id=SUPPORT_GROUP_ID, request_type="support")
    send_menu, _ = get_send_menu(request_text)
    await message.delete()
    await message.answer(
        f"<b>üõé –í–∞—à –∑–∞–ø—Ä–æ—Å: </b>üõ†\n\n"
        f"{request_text}\n\n"
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É: </b>",
        reply_markup=send_menu,
        parse_mode="HTML"
    )
    logger.info(f"User {message.from_user.id} entered support request: {request_text}")
    await state.set_state(SupportState.waiting_for_send)

@router.message(SupportState.waiting_for_request, ~F.content_type.in_(["text"]))
async def reject_support_request(message: Message):
    await message.answer("<b>‚ùå –î–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!</b>", parse_mode="HTML")
    logger.info(f"User {message.from_user.id} tried to send non-text in support")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
@router.message(ShopSupportState.waiting_for_shop_data, F.content_type == "text")
async def process_shop_support_data(message: Message, state: FSMContext):
    shop_data = message.text
    await state.update_data(request_text=shop_data, group_id=SUPPORT_GROUP_ID, request_type="support_shops")
    send_menu, _ = get_send_menu(shop_data)
    await message.delete()
    await message.answer(
        f"<b>üõé –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: </b>ü§ù\n\n"
        f"{shop_data}\n\n"
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É: </b>",
        reply_markup=send_menu,
        parse_mode="HTML"
    )
    logger.info(f"User {message.from_user.id} entered shop support data: {shop_data}")
    await state.set_state(ShopSupportState.waiting_for_send_shop)

@router.message(ShopSupportState.waiting_for_shop_data, ~F.content_type.in_(["text"]))
async def reject_shop_support_data(message: Message):
    await message.answer("<b>‚ùå –î–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!</b>", parse_mode="HTML")
    logger.info(f"User {message.from_user.id} tried to send non-text in shop support")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
@router.callback_query(SupportState.waiting_for_send, F.data == "send_order")
async def send_support_request(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    request_text = data["request_text"]
    user = callback.from_user
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(time.time() + 5 * 3600))  # UTC+5
    hashtag = data.get("hashtag", "#–ñ–∞–ª–æ–±–∞")
    
    support_message = (
        f"<b>{hashtag} üõ†</b>\n\n"
        f"<b>üìÜ {timestamp}</b>\n"
        f"<b>üë§ @{user.username or user.id} (ID: {user.id})</b>\n"
        f"<b>üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {request_text}</b>"
    )
    
    keyboard = get_info_menu(str(user.id))
    await callback.bot.send_message(SUPPORT_GROUP_ID, support_message, reply_markup=keyboard, parse_mode="HTML")
    
    await callback.message.edit_text(
        "<b>üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]),
        parse_mode="HTML"
    )
    logger.info(f"Support request sent by user {user.id}: {request_text}")
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
@router.callback_query(ShopSupportState.waiting_for_send_shop, F.data == "send_order")
async def send_shop_support_request(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    request_text = data["request_text"]
    user = callback.from_user
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(time.time() + 5 * 3600))  # UTC+5
    hashtag = data.get("hashtag", "#–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ")
    
    support_message = (
        f"<b>{hashtag} ü§ù</b>\n\n"
        f"<b>üìÜ {timestamp}</b>\n"
        f"<b>üë§ @{user.username or user.id} (ID: {user.id})</b>\n"
        f"<b>üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {request_text}</b>"
    )
    
    keyboard = get_info_menu(str(user.id))
    await callback.bot.send_message(SUPPORT_GROUP_ID, support_message, reply_markup=keyboard, parse_mode="HTML")
    
    await callback.message.edit_text(
        "<b>üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]),
        parse_mode="HTML"
    )
    logger.info(f"Shop support request sent by user {user.id}: {request_text}")
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
@router.callback_query(SupportState.waiting_for_send, F.data == "back_to_menu")
async def back_to_menu_support(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(
        get_welcome_text(callback.from_user),
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    logger.info(f"User {callback.from_user.id} returned to main menu from support")
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å (—Ä–µ–ø–ª–∞–π –≤ –≥—Ä—É–ø–ø–∞—Ö)
@router.message(F.reply_to_message)
async def handle_reply(message: Message):
    if message.chat.type == "private":
        reply_to = message.reply_to_message
        if reply_to and "üë§" in reply_to.text and "(ID:" in reply_to.text:
            user_id_str = reply_to.text.split("(ID: ")[1].split(")")[0]
            user_id = int(user_id_str) if user_id_str.isdigit() else None

            # –ò—â–µ–º ID –≥—Ä—É–ø–ø—ã, –æ—Ç–∫—É–¥–∞ –±—ã–ª –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            group_id = None
            if "Group:EXPRESS" in reply_to.text:
                group_id = EXPRESS_GROUP_ID
            elif "Group:SUPPORT" in reply_to.text:
                group_id = SUPPORT_GROUP_ID

            if user_id and group_id:
                sender = message.from_user.username or str(message.from_user.id)
                timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(time.time() + 5 * 3600))
                reply_message = (
                    f"<b>üîñ #–û—Ç–≤–µ—Ç–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üì©</b>\n\n"
                    f"<b>üìÜ {timestamp}</b>\n"
                    f"<b>üë§ –û—Ç @{sender} (ID: {message.from_user.id})</b>\n"
                    f"<b>üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}</b>"
                )
                await message.bot.send_message(
                    chat_id=group_id,
                    text=reply_message,
                    parse_mode="HTML"
                )
                await message.answer("<b>üì§ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É</b>", parse_mode="HTML")
                logger.info(f"Reply from user {message.from_user.id} sent to group {group_id}")
            else:
                await message.answer("<b>‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä—É–ø–ø—É, –æ—Ç–∫—É–¥–∞ –±—ã–ª –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.</b>", parse_mode="HTML")
            return
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ–ª—å–∫–æ —Ä–µ–ø–ª–∞—è–º–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    if message.reply_to_message and message.reply_to_message.from_user.id == (await message.bot.get_me()).id:
        if message.chat.id in [EXPRESS_GROUP_ID, SUPPORT_GROUP_ID]:
            reply_to = message.reply_to_message
            if "üë§" in reply_to.text and "(ID:" in reply_to.text:
                user_id_str = reply_to.text.split("(ID: ")[1].split(")")[0]
                user_id = int(user_id_str) if user_id_str.isdigit() else None
                
                if user_id:
                    sender = message.from_user.username or str(message.from_user.id)
                    timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(time.time() + 5 * 3600))
                    if message.chat.id == EXPRESS_GROUP_ID:
                        response_text = (
                            f"<b>üîñ #–ù–æ–≤—ã–π–û—Ç–≤–µ—Ç ‚ö°Ô∏è</b>\n\n"
                            f"<b>üìÜ {timestamp}</b>\n"
                            f"<b>üë§ –û—Ç @{sender}</b>\n"
                            f"<b>üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}</b>"
                        )
                        await message.bot.send_message(
                            chat_id=user_id,
                            text=response_text,
                            parse_mode="HTML"
                        )
                        await message.answer("<b>üì§ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚òëÔ∏è</b>", parse_mode="HTML")
                        logger.info(f"Reply sent to user {user_id} from group {message.chat.id}")
                    elif message.chat.id == SUPPORT_GROUP_ID:
                        response_text = (
                            f"<b>üîñ #–û—Ç–≤–µ—Ç–¢–µ—Ö–ü–æ–¥–¥–µ—Ä–∂–∫–∏ üõ†</b>\n\n"
                            f"<b>üìÜ {timestamp}</b>\n"
                            f"<b>üë§ –û—Ç @{sender}</b>\n"
                            f"<b>üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}</b>"
                        )
                        await message.bot.send_message(
                            chat_id=user_id,
                            text=response_text,
                            parse_mode="HTML"
                        )
                        await message.answer("<b>üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚òëÔ∏è</b>", parse_mode="HTML")
                        logger.info(f"Reply sent to user {user_id} from group {message.chat.id}")
                else:
                    logger.error(f"Failed to parse user ID from reply in chat {message.chat.id}")
    else:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ä–µ–ø–ª–∞–∏, –Ω–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –±–æ—Ç—É

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /chatid
@router.message(F.text.lower() == "/chatid", F.chat.type == "private")
async def chatid_command(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    await message.edit_text(
        f"<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: üìã</b>\nüë§ User ID: {user_id}\nüí¨ Chat ID: {chat_id}\nüë§ Username: @{username}",
        parse_mode="HTML"
    )
    logger.info(f"Chat ID info requested by user {user_id}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ban
@router.message(F.text.lower().startswith("/ban "), F.chat.type.in_(["private", "supergroup"]))
async def ban_command(message: Message):
    if message.chat.id not in [EXPRESS_GROUP_ID, SUPPORT_GROUP_ID] and message.chat.type == "supergroup":
        await message.answer("<b>‚ùå –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö.</b>", parse_mode="HTML")
        return
    
    try:
        user_id = int(message.text.split("/ban ")[1])
        await ban_user(user_id)
        await message.answer(f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω.</b>", parse_mode="HTML")
    except (IndexError, ValueError):
        await message.answer("<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban [ID]</b>", parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unban
@router.message(F.text.lower().startswith("/unban "), F.chat.type.in_(["private", "supergroup"]))
async def unban_command(message: Message):
    if message.chat.id not in [EXPRESS_GROUP_ID, SUPPORT_GROUP_ID] and message.chat.type == "supergroup":
        await message.answer("<b>‚ùå –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö.</b>", parse_mode="HTML")
        return
    
    try:
        user_id = int(message.text.split("/unban ")[1])
        await unban_user(user_id)
        await message.answer(f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.</b>", parse_mode="HTML")
    except (IndexError, ValueError):
        await message.answer("<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban [ID]</b>", parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∞–≤–∏–ª–∞"
@router.callback_query(F.data == "show_rules")
async def show_rules(callback: CallbackQuery):
    await callback.message.edit_text(
        "<b>üìú –ü—Ä–∞–≤–∏–ª–∞</b>\n\n"
        "<b>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å –æ–¥–Ω–∏–º –∏–∑ –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∏–∂–µ</b>\n\n"
        "<b>–ü—Ä–∞–≤–∏–ª–∞ –∏ —Ñ–æ—Ä–º–∞ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã :</b>\n"
        "<b>‚ñ´Ô∏è –û–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—è—Å–Ω–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –¥–∏—Å–ø—É—Ç –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –≤—ã–Ω–µ—Å–µ–Ω –Ω–µ –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É.</b>\n"
        "<b>‚ñ´Ô∏è –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ ( —Ñ–ª—É–¥ –∫–∞—Ä–∞–µ—Ç—Å—è –±–∞–Ω–æ–º )</b>\n"
        "<b>‚ñ´Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.</b>\n"
        "<b>–í —Å–ª—É—á–∞–µ –ù–ù –∏–º–µ—Ç—å —Ç–∞–∫ –∂–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ 2-3—à—Ç. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚ö†Ô∏è</b>\n"
        "<b>‚ñ´Ô∏è –í —Å–ª—É—á–∞–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å –≤ —Å–æ–¥–µ–π—Å—Ç–≤–∏–∏.</b>\n"
        "<b>‚ñ´Ô∏è –û–∂–∏–¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 48 —á–∞—Å–æ–≤</b>\n\n"
        "<b>–ú—ã –ø–æ–Ω–∏–º–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –≤ —Ç–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã, –Ω–æ –ø—Ä–æ—Å–∏–º –ø—Ä–æ—è–≤–∏—Ç—å —Ç–µ—Ä–ø–µ–Ω–∏–µ —Ç.–∫ —ç—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–∞—à–∏ —à–∞–Ω—Å—ã –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–ø–æ—Ä–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏</b>\n\n"
        "<b>–°/–£ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>",
        reply_markup=get_back_menu(callback_data="support_customers"),
        parse_mode="HTML"
    )
    logger.info(f"Rules shown to user {callback.from_user.id}")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º
@router.callback_query(F.data.in_(["main_menu", "support", "support_customers"]))
async def back_to_previous(callback: CallbackQuery, state: FSMContext):
    if callback.data == "main_menu":
        await callback.message.delete()
        await callback.message.answer(
            get_welcome_text(callback.from_user),
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
    elif callback.data == "support":
        await callback.message.delete()
        await callback.message.answer(
            "<b>‚öô –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
            "<b>üïπ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üõí –î–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π", callback_data="support_customers")],
                [InlineKeyboardButton(text="ü§ù –î–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤", callback_data="support_shops")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]),
            parse_mode="HTML"
        )
    elif callback.data == "support_customers":
        await callback.message.delete()
        await callback.message.answer(
            "<b>üõí –î–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</b>\n\n"
            "<b>‚ûñ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å/–∂–∞–ª–æ–±—É –Ω–∞ –º–∞–≥–∞–∑–∏–Ω –∏–ª–∏ –∞–¥–º–∏–Ω–æ–≤ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –í–∞–º –æ—Ç–≤–µ—Ç—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 24—Ö —á–∞—Å–æ–≤</b>\n\n"
            "<b>‚ö†Ô∏è –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ</b>\n\n"
            "<b>üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="show_rules")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="support")]
            ]),
            parse_mode="HTML"
        )
    logger.info(f"User {callback.from_user.id} returned to {callback.data}")
    await state.clear()
    await callback.answer()

def register_extra_handlers(dp):
    dp.message.middleware(BanCheckMiddleware())
    dp.include_router(router)